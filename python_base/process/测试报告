1.对于t4.py测试报告

情况一：
没使用多线程，循环执行fun1()，用时4s
情况二：
使用多线程,没有调用join，默认设置daemon为false
出现主程序退出，线程还在执行情况，这是很危险的操作，就是僵尸进程，如果多了内存就会爆掉

1.针对这种情况考虑一下解决方案：
1.设置daemon，守护线程，如果一个线程是主线程的守护线程的话，主线程消失守护线程也消失。即主死臣亡
当然这是我们不愿意看到的，我的任务还没执行完凭什么就要结束
2.针对上面的方案我们做了下改进，使用join(),这个函数，这个函数是干嘛的呢，他就是告诉主线程，我还没忙完呢，等会吧。
这样主线程就会等到它执行完在退出。perfect这就是我们想要的结果。就像电视里的寻宝，大家都到了打开宝藏的大门前，但是要是没有集齐，我们只有等钥匙到齐了才能打开宝藏。
当然这个宝藏大门如果设置了等待期限的话，如果期限到了，哪个人还没到，宝藏就自动打开。

测试结果如下：
1.对daemon=True,虽然我们在fun()中加入了死循环，但是我们的主线程接收，fun也结束了。
2.使用join()效果很好，没有设置timeout，它会等到所有的线程执行完在退出，如果设置了timeout他会计时如果时间到了还没有执行完，就直接退出


情况三：
1.使用多进程process，出现和多线程同样的情况,具体解决方案同上面的多线程
在使用process创建进程时，有两种方法：
1.直接将函数传给process
2.创建类继承process，在创建类实例，这样有什么好处就是可以自定义，在函数传入和传出做增加一些操作，就像一个修饰函数

2.使用Pool进程池，map方法并没有阻塞？ apply和apply_async()和map_async()基本达到预期想法